scans = which(data[, typeCol] == 1)
# 5 - merge data
SCANS = cbind(timestamp[scans], glucose[scans])
TS = cbind(timestamp[ts], glucose[ts])
length(scans)
scans
scans
glucose
timestamp
# 5 - merge data
SCANS = cbind(timestamp[scans], glucose[scans])
View(SCANS)
# 5 - merge data
SCANS = data.frame(timestamp = timestamp[scans],
GLUC = glucose[scans])
TS = data.frame(timestamp = timestamp[ts],
GLUC = glucose[ts])
# 6 - cutoffs
glucRanges = cut(glucose, breaks = c(0, 54, 70, 140, 180, 250, Inf), right = F)
glucRanges
# 6 - merge data
SCANS = data.frame(timestamp = timestamp[scans],
GLUC = glucose[scans],
classid = glucRanges[scans])
TS = data.frame(timestamp = timestamp[ts],
GLUC = glucose[ts],
classid = glucRanges[ts])
outputdir = "D:/EXTREME/output/CGM/"
# 7 - save timeseries
scansDir = file.path(outputdir, "scans/")
scansDir
# 7 - save timeseries
scansDir = file.path(outputdir, "scans")
scansDir
tsDir = file.path(outputdir, "time series")
tsDir
if (!dir.exists(scansDir)) dir.create(scansDir)
if (!dir.exists(tsDir)) dir.create(tsDir)
id
file.path(scansDir, id, ".RData")
paste(scansDir, id, ".RData"))
paste(scansDir, id, ".RData")
paste(scansDir, id, ".RData", sep = .Platform$path.sep)
paste(scansDir, id, ".RData", sep = .Platform$file.sep)
file.path(scansDir, paste0(id, ".RData"))
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
formatTime(data, timeCol = timeCol)
timeCol
colnames(data)
head(data)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
library(CGManalyzer)
# function to format timestamp to iso8601
POSIXtime2iso8601 = function(x,tz = ""){
chartime2iso8601 = function(x, tz) {
POStime = as.POSIXlt(as.numeric(as.POSIXlt(x, tz)), origin = "1970-1-1", tz)
POStimeISO = strftime(POStime, format = "%Y-%m-%dT%H:%M:%S%z")
return(POStimeISO)
}
POStime = as.POSIXlt(x,tz) #turn to right timezone
POStime_z = chartime2iso8601(format(POStime),tz) #change format
return(POStime_z)
}
library(CGManalyzer)
library(CGManalyzer)
library(CGManalyzer)
rm(list = ls())
datadir = "D:/EXTREME/CGM_PRE_EXTREME/"
outputdir = "D:/EXTREME/output/CGM/"
timeCol = NULL
glucCol = NULL
typeCol = NULL
verbose = TRUE
if (is.null(datadir) | !dir.exists(outputdir)) stop("Please, specify the datadir.")
if (is.null(outputdir) | !dir.exists(outputdir)) stop("Please, specify the outputdir.")
# print in console...
if (verbose) {
cat('\n')
cat(paste0(rep('_', options()$width), collapse = ''))
cat("Processing data...\n")
cat("ID: ")
}
# list of files to be read
FILES = dir(datadir, full.names = TRUE)
# extract IDs from filenames
ids = c()
for (i in 1:length(FILES)) {
id_unlist = unlist(strsplit(basename(FILES[i]), split = "_"))
id = id_unlist[2]
if (suppressWarnings(is.na(as.numeric(id)))) id = id_unlist[1]
ids[i] = id
}
ids = unique(ids)
# loop through ids
for (i in 1:length(ids)) {
id = ids[i]
# if (id == "167") browser()
if (verbose) cat(id, " ")
# files to read -----
files2read = grep(id, FILES, value = TRUE)
if (length(files2read) > 2) stop("Revise id = ", id)
# 1 - read CGM file/s
data = as.data.frame(readCGM(files = files2read))
# 2 - format timestamp
timestamp = formatTime(data, timeCol = timeCol)
# 3 - format glucose
glucose = formatGlucose(data, glucCol = glucCol)
# 4 - mark scan and time series
if (is.null(typeCol)) {
typeCol = grep("type|tipo", colnames(data),
ignore.case = TRUE, value = TRUE)
}
# categories
ts = which(data[, typeCol] == 0)
scans = which(data[, typeCol] == 1)
# 5 - cutoffs
glucRanges = cut(glucose, breaks = c(0, 54, 70, 140, 180, 250, Inf), right = F)
# 6 - merge data
SCANS = data.frame(timestamp = timestamp[scans],
GLUC = glucose[scans],
classid = glucRanges[scans])
TS = data.frame(timestamp = timestamp[ts],
GLUC = glucose[ts],
classid = glucRanges[ts])
# 7 - save timeseries
scansDir = file.path(outputdir, "scans")
tsDir = file.path(outputdir, "time series")
if (!dir.exists(scansDir)) dir.create(scansDir)
if (!dir.exists(tsDir)) dir.create(tsDir)
save(SCANS, file = file.path(scansDir, paste0(id, ".RData")))
save(TS, file = file.path(tsDir, paste0(id, ".RData")))
}
load("D:/EXTREME/output/CGM/time series/100.RData")
head(TS)
load("D:/EXTREME/output/CGM/time series/232.RData")
head(TS)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
load("D:/EXTREME/output/CGM/time series/100.RData")
head(TS)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
load("D:/EXTREME/output/CGM/time series/142.RData")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
files2read
View(data)
timestamp
glucose
load("D:/EXTREME/output/CGM/time series/141.RData")
View(TS)
FILES
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
files2read
head(data)
timestamp
debug(formatTime)
# 2 - format timestamp
timestamp = formatTime(data, timeCol = timeCol)
timeCol
timeCol
timeCol_lengths
timeCol
head(data[, timeCol])
strptime(data[, timeCol],
format = "%d/%m/%Y %H:%M", tz = "GMT")
timestamp
as.character(round(as.POSIXct(timestamp), "mins"))
as.POSIXct(timestamp)
as.POSIXct(timestamp)
timestamp = strptime(data[, timeCol],
format = "%d/%m/%Y %H:%M", tz = "GMT")
any(is.na(timestamp))
data[, timeCol]
timestamp = strptime(data[, timeCol],
format = "%Y/%m/%d %H:%M", tz = "GMT")
timestamp
any(is.na(timestamp))
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
timestamp
table(nchar(timestamp))
any(nchar(timestamp) != 19)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/")
rm(list = ls())
datadir = "D:/EXTREME/CGM_PRE_EXTREME/"
outputdir = "D:/EXTREME/output/CGM/1-baseline/"
timeCol = NULL
glucCol = NULL
typeCol = NULL
verbose = TRUE
if (is.null(datadir) | !dir.exists(outputdir)) stop("Please, specify the datadir.")
if (is.null(outputdir) | !dir.exists(outputdir)) stop("Please, specify the outputdir.")
# print in console...
if (verbose) {
cat('\n')
cat(paste0(rep('_', options()$width), collapse = ''))
cat("Processing data...\n")
cat("ID: ")
}
# list of files to be read
FILES = dir(datadir, full.names = TRUE)
FILES
# extract IDs from filenames
ids = c()
for (i in 1:length(FILES)) {
id_unlist = unlist(strsplit(basename(FILES[i]), split = "_"))
id = id_unlist[2]
if (suppressWarnings(is.na(as.numeric(id)))) id = id_unlist[1]
ids[i] = id
}
ids = unique(ids)
ids
# loop through ids
for (i in 1:length(ids)) {
id = ids[i]
# if (id == "183") browser()
if (verbose) cat(id, " ")
# files to read -----
files2read = grep(id, FILES, value = TRUE)
if (length(files2read) > 2) stop("Revise id = ", id)
# 1 - read CGM file/s
data = as.data.frame(readCGM(files = files2read))
# 2 - format timestamp
timestamp = formatTime(data, timeCol = timeCol)
# 3 - format glucose
glucose = formatGlucose(data, glucCol = glucCol)
# 4 - mark scan and time series
if (is.null(typeCol)) {
typeCol = grep("type|tipo", colnames(data),
ignore.case = TRUE, value = TRUE)
}
# categories
ts = which(data[, typeCol] == 0)
scans = which(data[, typeCol] == 1)
# 5 - cutoffs
glucRanges = cut(glucose, breaks = c(0, 54, 70, 140, 180, 250, Inf), right = F)
# 6 - merge data
SCANS = data.frame(timestamp = timestamp[scans],
GLUC = glucose[scans],
classid = glucRanges[scans])
TS = data.frame(timestamp = timestamp[ts],
GLUC = glucose[ts],
classid = glucRanges[ts])
# 7 - save timeseries
scansDir = file.path(outputdir, "scans")
tsDir = file.path(outputdir, "time series")
if (!dir.exists(scansDir)) dir.create(scansDir)
if (!dir.exists(tsDir)) dir.create(tsDir)
save(SCANS, file = file.path(scansDir, paste0(id, ".RData")))
save(TS, file = file.path(tsDir, paste0(id, ".RData")))
}
library(CGManalyzer)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
head(data)
table(data$`Tipo de registro`)
debug(readCGM)
# 1 - read CGM file/s
data = as.data.frame(readCGM(files = files2read))
datasets[[1]]
View(datasets[[1]])
data.table::fread(files[i], sep = '\t')
data.table::fread(files[i], sep = '\t', fill = TRUE)
read.delim(files[i], sep = '\t', fill = TRUE)
View(read.delim(files[i], sep = '\t', fill = TRUE))
read.delim(files[i], sep = '\t')
View(read.delim(files[i], sep = '\t'))
datasets[[i]] = read.delim(files[i], sep = '\t')
which(is.na(datasets[[i]]$ID))
NAs = which(is.na(datasets[[i]]$ID))
length(NAs) > 0
NAs
dim(datsets[[i]])
dim(datasets[[i]])
datasets[[i]] = datasets[[i]][-NAs,]
dim(datasets[[i]])
library(CGManalyzer)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
?read.delim
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
head(data)
head(timestamp)
head(glucose)
is.null(typeCol)
typeCol
typeCol = grep("type|tipo", colnames(data),
ignore.case = TRUE, value = TRUE)
typeCol
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
typeCol
# back up of typeCol
typeCol_bu = typeCol
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
head(data)
dim(data)
formatTime(data, timeCol = timeCol)
timeCol
timeCol
timeCol
head(data[, timeCol])
strptime(data[, timeCol],
format = "%d/%m/%Y %H:%M", tz = "GMT")
timestamp = strptime(data[, timeCol],
format = "%d/%m/%Y %H:%M", tz = "GMT")
all(is.na(timestamp))
head(data[, timeCol])
tail(data[, timeCol])
View(data)
id
View(data)
head(data)
colnames(data)
data$Histórico.glucosa..mg.dL.[65:nrow(data)] = data$Hora[65:nrow(data)]
View(data)
data$Hora[65:nrow(data)] = data$ID[65:nrow(data)]
View(data)
data$Tipo.de.registro[65:nrow(data)] = 0
View(data)
write.table(data, file = "D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", row.names = FALSE)
library(CGManalyzer)
data = read.delim("D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", sep = "\t", header = TRUE, fill = TRUE)
View(data)
data = read.delim("D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", sep = "\t", header = TRUE, fill = TRUE, quote = "#")
data = read.table("D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", sep = "\t", header = TRUE, fill = TRUE)
data = read.table("D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", sep = "\t", header = FALSE, fill = TRUE)
data = read.table("D:/EXTREME/CGM_PRE_EXTREME/ID_167_modificado Jon Echarte_jhm.txt", sep = "\t", header = TRUE, fill = TRUE)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
head(data)
debug(readCGM)
# 1 - read CGM file/s
data = as.data.frame(readCGM(files = files2read))
head(datasets[[i]])
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
files2read
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
debug(readCGM)
head(datasets[[i]])
View(datasets[[i]])
which(is.na(datasets[[i]]$Tipo.de.registro))
which(is.numeric(datasets[[i]]$Hora))
NAs
# reformat dataset?
NAs = which(is.na(datasets[[i]]$Tipo.de.registro) & is.na(datasets[[i]]$Histórico.glucosa..mg.dL.) &
is.na(datasets[[i]]$Glucosa.leída..mg.dL.))
NAs
toRevise = range(NAs)
toRevise
datasets[[i]]$Hora[toRevise]
NAs
datasets[[i]]$Tipo.de.registro[NAs] = 0
datasets[[i]]$Histórico.glucosa..mg.dL.[NAs] = datasets[[i]]$Hora[NAs]
datasets[[i]]$Hora[NAs] = datasets[[i]]$ID[NAs]
datasets[[i]]$ID[NAs] = 0
View(datasets[[i]])
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
debug(readCGM)
datasets[[i]]$Hora
# fix timestamp format in scan rows
tsRevise = 1:(NAs[1] - 1)
tsRevise
NAs
datasets[[i]]$Hora[tsRevise]
class(datasets[[i]]$Hora[tsRevise])
strptime(datasets[[i]]$Hora[tsRevise], format = "%Y/%m/%d %H:%M")
newTS = strptime(datasets[[i]]$Hora[tsRevise], format = "%Y/%m/%d %H:%M")
format(newTS, format = "%d/%m/%y %H:%M")
newTS = format(newTS, format = "%d/%m/%y %H:%M")
datasets[[i]]$Hora[tsRevise] = newTS
View(datasets[[i]])
newTS = format(newTS, format = "%d/%m/%Y %H:%M")
datasets[[i]]$Hora[tsRevise] = newTS
View(datasets[[i]])
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
debug(readCGM)
View(datasets[[i]])
View(datasets[[i]])
NAs[1]
head(newTS)
View(data)
# remove extra rows if any
which(data$Hora == "")
# remove extra rows if any
which(data$Hora == "" & data$Histórico.glucosa..mg.dL. == "")
# remove extra rows if any
extra_rows = which(data$Hora == "" & data$Histórico.glucosa..mg.dL. == "")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
head(timestamp)
which(nchar(timestamp) == 10)
timestamp[524]
timeCol
debug(formatTime)
# 2 - format timestamp
timestamp = formatTime(data, timeCol = timeCol)
head(data[, timeCol])
any(nchar(timestamp) == 10)
addHour = which(nchar(timestamp) == 10)
addHour
addHour
length(addHour) > 0
paste(timestamp[addHour], "00:00:00")
head(timestamp)
timestamp[addHour] = paste(timestamp[addHour], "00:00:00")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
library(CGManalyzer)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_PRE_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/1-baseline/")
tail(data)
which(is.na(data$Hora))
head(data$Hora)
which(is.na(timestamp))
ts
scans
which(is.na(TS$timestamp))
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
timeCol
timeCol
head(data)
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
debug(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
FILES
ids
undebug(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
library(CGManalyzer)
CGManalyzer(datadir = "D:/EXTREME/CGM_POST_EXTREME/",
outputdir = "D:/EXTREME/output/CGM/2-followup/")
